;; Object semantic/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semantic/"
  :tables (list 
   (semanticdb-table "semanticdb-file.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("inversion" include nil nil [1143 1163]) ("semantic" include nil nil [1164 1183]) ("semanticdb" include nil nil [1184 1205]) ("cedet-files" include nil nil [1206 1228]) ("semanticdb-file-version" variable (:default-value semantic-version) nil [1230 1340]) ("semanticdb-file-incompatible-version" variable (:default-value "1.4") nil [1341 1454]) ("semanticdb-default-file-name" variable (:user-visible-flag t :default-value "semantic.cache") nil [1487 1623]) ("semanticdb-default-save-directory" variable (:user-visible-flag t :default-value (expand-file-name "~/.semanticdb")) nil [1640 2191]) ("semanticdb-persistent-path" variable (:user-visible-flag t :default-value (quote (always))) nil [2208 2912]) ("semanticdb-save-database-hooks" variable (:user-visible-flag t) nil [2914 3135]) ("semanticdb-dir-sep-char" variable (:default-value (if (boundp (quote directory-sep-char)) (symbol-value (quote directory-sep-char)) 47)) nil [3137 3406]) ("semanticdb-fix-pathname" function (:arguments ("dir")) nil [3408 3623]) ("semanticdb-project-database-file" type (:interfaces ("eieio-persistent") :superclasses "semanticdb-project-database" :members (("file-header-line" variable (:default-value ";; SEMANTICDB Tags save file") nil nil) ("do-backups" variable (:default-value "nil") nil nil) ("semantic-tag-version" variable (:documentation "The version of the tags saved.
The default value is 1.4.  In semantic 1.4 there was no versioning, so
when those files are loaded, this becomes the version number.
To save the version number, we must hand-set this version string." :default-value "1.4") nil nil) ("semanticdb-version" variable (:documentation "The version of the object system saved.
The default value is 1.4.  In semantic 1.4, there was no versioning,
so when those files are loaded, this becomes the version number.
To save the version number, we must hand-set this version string." :default-value "1.4") nil nil)) :type "class") nil [3937 4862]) ("semanticdb-create-database" function (:parent "semanticdb-project-database-file" :arguments ("dbc" "directory")) nil [4877 6003]) ("semanticdb-load-database" function (:arguments ("filename")) nil [6017 7152]) ("semanticdb-file-loaded-p" function (:arguments ("filename")) nil [7169 7356]) ("semanticdb-file-directory-exists-p" function (:parent "semanticdb-project-database-file" :arguments ("DB" "&optional" "supress-questions")) nil [7358 8162]) ("semanticdb-save-db" function (:parent "semanticdb-project-database-file" :arguments ("DB" "&optional" "supress-questions")) nil [8164 9557]) ("semanticdb-live-p" function (:parent "semanticdb-project-database" :arguments ("obj")) nil [9574 9865]) ("semanticdb-live-p" function (:parent "semanticdb-table" :arguments ("obj")) nil [9867 10192]) ("semanticdb-data-debug-on-write-error" variable nil nil [10194 10384]) ("object-write" function (:parent "semanticdb-table" :arguments ("obj")) nil [10386 11852]) ("semanticdb-write-directory-p" function (:parent "semanticdb-project-database-file" :arguments ("obj")) nil [11875 13191]) ("semanticdb-file-table" function (:parent "semanticdb-project-database-file" :arguments ("obj" "filename")) nil [13222 13557]) ("semanticdb-file-name-non-directory" function (:parent "semanticdb-project-database-file" :arguments (#("dbclass" 0 7 (fontified t)))) nil [13559 13773]) ("semanticdb-file-name-directory" function (:parent "semanticdb-project-database-file" :arguments (#("dbclass" 0 7 (fontified t)) "directory")) nil [13775 14314]) ("semanticdb-cache-filename" function (:parent "semanticdb-project-database-file" :arguments (#("dbclass" 0 7 (fontified t)) "path")) nil [14316 14790]) ("semanticdb-full-filename" function (:parent "semanticdb-project-database-file" :arguments ("obj")) nil [14807 14950]) ("semanticdb-cleanup-cache-files" function (:user-visible-flag t :arguments ("&optional" "noerror")) nil [14975 16454]) (#("semanticdb-file" 0 15 (fontified t face font-lock-constant-face)) package nil nil [16456 16482]))
    :file "semanticdb-file.el"
    :pointmax 16517
    )
   (semanticdb-table "semanticdb-ebrowse.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("eieio" include nil nil [2322 2338]) ("eieio-opt" include nil nil [2341 2361]) (#("semanticdb-file" 0 15 (fontified t face font-lock-constant-face)) include nil nil [2366 2392]) ("condition-case" code nil nil [2543 2604]) ("semanticdb-ebrowse-default-file-name" variable (:default-value "BROWSE") nil [2617 2721]) ("semanticdb-ebrowse-file-match" variable (:default-value "\\.\\(hh?\\|HH?\\|hpp\\)") nil [2723 3106]) ("semanticdb-table-ebrowse" type (:superclasses "semanticdb-table" :members (("major-mode" variable (:default-value "c++-mode") nil nil) ("ebrowse-tree" variable (:documentation "The raw ebrowse tree for this file." :default-value "nil") nil nil) ("global-extract" variable (:documentation "Table of ebrowse tags specific to this file.
This table is compisited from the ebrowse *Globals* section." :default-value "nil") nil nil)) :type "class") nil [3156 3623]) ("semanticdb-project-database-ebrowse" type (:superclasses "semanticdb-project-database" :members (("new-table-class" variable (:documentation "New tables created for this database are of this class." :default-value "semanticdb-table-ebrowse" :type "class") nil nil) ("system-include-p" variable (:documentation "Flag indicating this database represents a system include directory." :default-value "nil") nil nil) ("ebrowse-struct" variable (:default-value "nil") nil nil)) :type "class") nil [3625 4229]) ("semanticdb-ebrowse-C-file-p" function (:arguments ("file")) nil [4231 4763]) ("semanticdb-create-ebrowse-database" function (:user-visible-flag t :arguments ("dir")) nil [4780 6554]) ("semanticdb-load-ebrowse-caches" function (:user-visible-flag t) nil [6571 6883]) ("semanticdb-ebrowse-load-helper" function (:arguments ("directory")) nil [6900 7819]) ("semanticdb-project-system-databases" variable (:parent "c++-mode" :override-variable-flag t) nil [7984 8085]) ("semanticdb-needs-refresh-p" function (:parent "semanticdb-table-ebrowse" :arguments ("table")) nil [8087 8437]) ("semanticdb-ebrowse-file-for-directory" function (:arguments ("dir")) nil [8591 9027]) ("semanticdb-ebrowse-get-ebrowse-structure" function (:arguments ("dir")) nil [9029 9950]) ("semanticdb-create-database" function (:parent "semanticdb-project-database-ebrowse" :arguments ("dbeC" "directory")) nil [10001 11515]) ("semanticdb-ebrowse-strip-trees" function (:parent "semanticdb-project-database-ebrowse" :arguments ("dbe" "data")) nil [11517 12812]) ("semanticdb-ebrowse-add-globals-to-table" function (:arguments ("dbe" "tree")) nil [12844 14004]) ("semanticdb-ebrowse-add-tree-to-table" function (:arguments ("dbe" "tree" "&optional" "fname" "baseclasses")) nil [14006 16542]) ("semanticdb-normalize-tags" function (:parent "semanticdb-table-ebrowse" :arguments ("obj" "tags")) nil [16621 18301]) ("semanticdb-normalize-one-tag" function (:parent "semanticdb-table-ebrowse" :arguments ("obj" "tag")) nil [18303 19978]) ("semanticdb-find-tags-by-name-method" function (:parent "semanticdb-table-ebrowse" :arguments ("table" "name" "&optional" "tags")) nil [20128 20664]) ("semanticdb-find-tags-by-name-regexp-method" function (:parent "semanticdb-table-ebrowse" :arguments ("table" "regex" "&optional" "tags")) nil [20666 20997]) ("semanticdb-find-tags-for-completion-method" function (:parent "semanticdb-table-ebrowse" :arguments ("table" "prefix" "&optional" "tags")) nil [20999 21352]) ("semanticdb-find-tags-by-class-method" function (:parent "semanticdb-table-ebrowse" :arguments ("table" "class" "&optional" "tags")) nil [21354 21656]) ("semanticdb-deep-find-tags-by-name-method" function (:parent "semanticdb-table-ebrowse" :arguments ("table" "name" "&optional" "tags")) nil [21903 22228]) ("semanticdb-deep-find-tags-by-name-regexp-method" function (:parent "semanticdb-table-ebrowse" :arguments ("table" "regex" "&optional" "tags")) nil [22230 22595]) ("semanticdb-deep-find-tags-for-completion-method" function (:parent "semanticdb-table-ebrowse" :arguments ("table" "prefix" "&optional" "tags")) nil [22597 22977]) ("semanticdb-find-tags-external-children-of-type-method" function (:parent "semanticdb-table-ebrowse" :arguments ("table" "type" "&optional" "tags")) nil [23004 23404]) ("semanticdb-ebrowse-run-tests" function (:user-visible-flag t) nil [23497 24279]) ("semanticdb-ebrowse-dump" function (:user-visible-flag t) nil [24281 24667]) ("semanticdb-ebrowse" package nil nil [24669 24698]))
    :file "semanticdb-ebrowse.el"
    :pointmax 24736
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0pre4"
  :semanticdb-version "2.0pre4"
  )
